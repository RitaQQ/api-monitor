# 乾淨的生產環境 Dockerfile
# 確保完全不包含本地開發資料
FROM python:3.11-slim as base

# 設置工作目錄
WORKDIR /app

# 設置環境變量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=simple_app.py \
    FLASK_ENV=production

# 安裝系統依賴
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        libc6-dev \
        sqlite3 \
        curl \
    && rm -rf /var/lib/apt/lists/*

# 複製並安裝 Python 依賴
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# 複製應用檔案 (使用 COPY . . 但排除不需要的檔案)
COPY . .

# 清理不需要的檔案（.dockerignore 已經處理大部分）
RUN find . -name "*.pyc" -delete \
    && find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# 創建乾淨的資料和日誌目錄
RUN mkdir -p /app/data \
    && mkdir -p /app/logs \
    && chmod -R 755 /app/data \
    && chmod -R 755 /app/logs

# 創建非 root 用戶
RUN adduser --disabled-password --gecos '' --uid 1000 appuser \
    && chown -R appuser:appuser /app

# 切換到應用用戶
USER appuser

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-5001}/health || exit 1

# 運行時初始化並啟動
CMD ["sh", "-c", "python railway_init.py && python simple_app.py"]